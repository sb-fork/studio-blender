"""This file is mostly a copy of addons/io_export_skybrush_csv.py, which
will probably be deprecated soon as its functionality is merged with the
"main" Blender addon.

The operator provided in this file exports drone show trajectories and light
animation to a simple (zipped) .csv format compatible with the Skybrush suite.

The primary and recommended drone show format of the Skybrush suite is the
Skybrush Compiled Format (.skyc), which is much more versatile and optimized
than the simple text output generated by this script.

This script is created for those who want to use their own scripts or tools for
post-processing.
"""

import bpy
import logging
import os
import re
import csv
import math
import random
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, List, Tuple
from zipfile import ZipFile, ZIP_DEFLATED

from bpy.props import BoolProperty, StringProperty, FloatProperty
from bpy.types import Operator
from bpy_extras.io_utils import ExportHelper

from sbstudio.plugin.props.frame_range import FrameRangeProperty, resolve_frame_range
from sbstudio.plugin.utils.sampling import _to_int_255

from .utils import get_drones_to_export

__all__ = ("SkybrushKMLExportOperator",)

log = logging.getLogger(__name__)

#############################################################################
# some global variables that could be parametrized if needed

SUPPORTED_TYPES = ("MESH",)  # ,'CURVE','EMPTY','TEXT','CAMERA','LAMP')


#############################################################################
# Helper functions and classes for the exporter
#############################################################################


@dataclass
class TimePosColor:
    # time in milliseconds
    t: int
    # x position in meters
    x: float
    # y position in meters
    y: float
    # z position in meters
    z: float
    # red channel value [0-255]
    R: int
    # green channel value [0-255]
    G: int
    # blue channel value [0-255]
    B: int

    def __repr__(self):
        return f"{self.t},{round(self.x, ndigits=3)},{round(self.y, ndigits=3)},{round(self.z, ndigits=3)},{self.R},{self.G},{self.B}"


def _get_location(obj):
    """Return global location of an object at the current frame.

    Parameters:
        obj: a Blender object

    Return:
        location of object in the world frame

    """
    return tuple(obj.matrix_world.translation)


def _find_shader_node_by_name_and_type(material, name: str, type: str):
    """Finds the first shader node with the given name and expected type in the
    shader node tree of the given material.

    Lookup by name will likely fail if Blender is localized; in this case we
    will return the _first_ shader node that matches the given type.

    Parameters:
        name: the name of the shader node
        type: the expected type of the shader node

    Raises:
        KeyError: if there is no such shader node in the material
    """
    nodes = material.node_tree.nodes

    try:
        node = nodes[name]
        if node.type == type:
            return node
    except KeyError:
        pass

    # Lookup by name failed, let's try the slower way
    for node in nodes:
        if node.type == type:
            return node

    raise KeyError(f"no shader node with type {type!r} in material")


def _get_shader_node_and_input_for_diffuse_color_of_material(material):
    """Returns a reference to the shader node and its input that controls the
    diffuse color of the given material.

    The material must use a principled BSDF or an emission shader.

    Parameters:
        material: the Blender material to update

    Raises:
        ValueError: if the material does not use shader nodes
    """
    try:
        node = _find_shader_node_by_name_and_type(material, "Emission", "EMISSION")
        input = node.inputs["Color"]
        return node, input
    except KeyError:
        try:
            node = _find_shader_node_by_name_and_type(
                material, "Principled BSDF", "BSDF_PRINCIPLED"
            )
            input = node.inputs["Base Color"]
            return node, input
        except KeyError:
            try:
                node = _find_shader_node_by_name_and_type(
                    material, "Principled BSDF", "BSDF_PRINCIPLED"
                )
                input = node.inputs["Emission"]
                return node, input
            except KeyError:
                raise ValueError("Material does not have a diffuse color shader node")


def _get_color(obj, frame):
    """Return diffuse_color of an object at the current frame.

    Parameters:
        obj: a Blender object
        frame: the current frame

    Return:
        color of object as an R, G, B tuple in [0-255]

    """
    # if there is no material or diffuse color, we return black
    material = obj.active_material
    if not material or not material.diffuse_color:
        return (0, 0, 0)

    # if color is not animated with nodes, use a single color (that can be
    # an animated color as well, which is already evaluated at the given frame)
    if not material.use_nodes:
        return (
            _to_int_255(material.diffuse_color[0]),
            _to_int_255(material.diffuse_color[1]),
            _to_int_255(material.diffuse_color[2]),
        )

    # if a shader node is used, sample it on the given frame
    node, input = _get_shader_node_and_input_for_diffuse_color_of_material(material)
    animation = material.node_tree.animation_data
    # if it is not animated, get the default value
    if not animation:
        rgb = input.default_value[:3]
    # if it is animated, evaluate shader node on the given frame
    else:
        index = node.inputs.find(input.name)
        data_path = f'nodes["{node.name}"].inputs[{index}].default_value'
        rgb = [0, 0, 0]
        for fc in animation.action.fcurves:
            if fc.data_path != data_path:
                continue

            # iterate channels (r, g, b) only
            if fc.array_index not in (0, 1, 2):
                continue

            rgb[fc.array_index] = fc.evaluate(frame)

    return (
        _to_int_255(rgb[0]),
        _to_int_255(rgb[1]),
        _to_int_255(rgb[2]),
    )


def _get_frame_range_from_export_settings(context, settings) -> Tuple[int, int, int]:
    """Get framerange and related variables.

    Parameters:
        context: the main Blender context
        settings: export settings

    Return:
        framerange to be used during the export. Framerange is a 3-tuple
        consisting of (first_frame, last_frame, frame_skip_factor)
    """
    start, end = resolve_frame_range(settings["frame_range"], context=context)
    fps = context.scene.render.fps
    fpsskip = int(fps / settings["output_fps"])
    return start, end, fpsskip


def _get_trajectories_and_lights(
    context, settings, frame_range: Tuple[int, int, int]
) -> Dict[str, List[TimePosColor]]:
    """Get trajectories and lights of all selected/picked objects.

    Parameters:
        context: the main Blender context
        settings: export settings
        framerange: the framerange used for exporting

    Return:
        drone show data in lists of TimePosColor entries, in a dictionary, indexed by object names

    """

    # get object trajectories for each needed frame in convenient format
    fps = context.scene.render.fps
    data = {}
    context.scene.frame_set(frame_range[0])
    objects = list(get_drones_to_export(settings["export_selected"]))

    # initialize trajectories and lights
    for obj in objects:
        data[obj.name] = []

    # parse trajectories and lights
    for frame in range(frame_range[0], frame_range[1] + frame_range[2], frame_range[2]):
        log.debug(f"processing frame {frame}")
        context.scene.frame_set(frame)
        for obj in objects:
            pos = _get_location(obj)
            color = _get_color(obj, frame)
            data[obj.name].append(TimePosColor(int(frame / fps * 1000), *pos, *color))

    return data

def _get_vectors(
    context, settings, frame_range: Tuple[int, int, int]
) -> Dict[str, List[TimePosColor]]:
    """Get trajectories and lights of all selected/picked objects.

    Parameters:
        context: the main Blender context
        settings: export settings
        framerange: the framerange used for exporting

    Return:
        drone show data in lists of TimePosColor entries, in a dictionary, indexed by object names

    """

    # get object trajectories for each needed frame in convenient format
    fps = context.scene.render.fps
    # data = {}
    data = []
    context.scene.frame_set(frame_range[0])
    objects = list(get_drones_to_export(settings["export_selected"]))

    # initialize trajectories and lights
    # for obj in objects:
    #     data[obj.name] = []

    # parse trajectories and lights
    # for frame in range(frame_range[0], frame_range[1] + frame_range[2], frame_range[2]):
    #     log.debug(f"processing frame {frame}")
    #     context.scene.frame_set(frame)
    #     for obj in objects:
    #         pos = _get_location(obj)
    #         color = _get_color(obj, frame)
    #         # data[obj.name].append(TimePosColor(int(frame / fps * 1000), *pos, *color))
    for obj in objects:
        vectors = []
        for frame in range(frame_range[0], frame_range[1] + frame_range[2], frame_range[2]):
            context.scene.frame_set(frame)
            vectors.append(list(_get_location(obj)))
        lats, longs, alts = convert_vectors_to_latlon(vectors, settings["base_latitude"], settings["base_longitude"])
        data.append([lats,longs,alts])

    return data

def _export_data_to_zip(data_dict: Dict[str, List[TimePosColor]], filepath: Path):
    """Export data to individual csv files zipped into a common file."""
    # write .csv files in a .zip file
    with ZipFile(filepath, "w", ZIP_DEFLATED) as zip_file:
        for name, data in data_dict.items():
            safe_name = re.sub(r"[^A-Za-z0-9\.\+\-]", "_", name)
            lines = [
                ",".join(
                    ["Time [msec]", "x [m]", "y [m]", "z [m]", "Red", "Green", "Blue"]
                )
            ] + [str(item) for item in data]
            zip_file.writestr(safe_name + ".csv", "\n".join(lines))


def _write_skybrush_file(context, settings, filepath: Path) -> None:
    """Creates Skybrush-compatible CSV output from blender trajectories and
    color animation.

    This is a helper function for SkybrushCSVExportOperator

    Parameters:
        context: the main Blender context
        settings: export settings
        filepath: the output path where the export should write

    """

    # get framerange
    log.info("Getting frame range from {}".format(settings["frame_range"]))
    frame_range = _get_frame_range_from_export_settings(context, settings)
    # get trajectories and lights
    log.info("Getting object trajectories and lights")
    wgs84 = _get_vectors(
        context, settings, frame_range
    )
    make_kml_file(wgs84, filepath)

    log.info("KML Export finished")

def convert_vectors_to_latlon(vectors, base_latitude, base_longitude, earth_radius=6371):
    lats=[]
    longs=[]
    alts= []
    for vector in vectors:
        x = vector[0]/1000
        y = vector[1]/1000
        z = vector[2]
        lat = base_latitude + (y / earth_radius) * (180 / math.pi)
        lon = base_longitude + (x / earth_radius) * (180 / math.pi) / math.cos(base_latitude * math.pi / 180)
        lats.append(lat)
        longs.append(lon)
        alts.append(z)
    return lats,longs,alts

def make_kml_file(wgs84, filepath: Path):

    # print(wgs84)
    colors = ["ffff0000","ff00ff00","ff0000ff","ff0ab000","ff0000bb"]
    a = f"""<?xml version=\"1.0\" encoding=\"UTF-8\"?>
    <kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\" xmlns:kml=\"http://www.opengis.net/kml/2.2\" xmlns:atom=\"http://www.w3.org/2005/Atom\">
    <Document>    
        <name> Line Animation Sample</name>  
        <open>1</open>"""
    for t in range(len(wgs84)):
        r = random.randrange(0, 2**8)
        r1 = str(hex(r))
        r1 = r1.replace('0x','')
        if r < 16:
            r1 = "0" + r1
        # print(type(r1))
        g = random.randrange(0, 2**8)
        g1 = str(hex(g)) 
        g1 = g1.replace('0x','')
        if g < 16:
            g1 = "0" + g1
        # print(type(g1))
        b = random.randrange(0, 2**8)
        b1 = str(hex(b))
        b1 = b1.replace('0x','')
        if b < 16:
            b1 = "0" + b1
        # print(type(b1))
        o = random.randrange(0, 2**8)
        o = str(hex(o))
        o = o.replace('0x','')
        color = "ff" + b1 + g1 + r1
        # print(color)  
        a +=f"""<Style id=\"line-style{t}\">
            <LineStyle>
                <color>{color}</color>  	<!-- this is the color of your path -->   
                <width>1</width>		<!-- this is the width of your path -->
            </LineStyle>
            </Style>	"""
    a +=f"""	<!-- this is the camera view  -->	
	
		<LookAt>
			<longitude>{wgs84[0][1][0] - 0.00066847352015}</longitude>
			<latitude>{wgs84[0][0][0] - 0.00066847352015}</latitude>
			<altitude>0</altitude>
			<heading>0.36466847352015</heading>
			<tilt>70.96541540083902</tilt>
			<range>200.432628192288</range>
			<gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode>
		</LookAt>
	
    <gx:Tour>
        <name>Double-click here to start tour</name>
        <gx:Playlist>

            <gx:Wait> <gx:duration>0.01</gx:duration></gx:Wait>"""


    g = [len(wgs84[p][0]) for p in range(len(wgs84))]
    # print(g)
    for c in range(max(g)):
        a += f"""
  		    <gx:AnimatedUpdate>
			<Update>"""
        for r in range(len(wgs84)):
            if (c < len(wgs84[r][0])):
                a += f'<Change><Placemark targetId="{r}v{c}"><visibility>1</visibility></Placemark></Change>'
        a += f"""</Update>
		    </gx:AnimatedUpdate>		
    <gx:Wait><gx:duration>0.01</gx:duration></gx:Wait>"""

    a += f"""	</gx:Playlist>
    </gx:Tour>


	    <Folder>
		    <name>Path segments</name>
		
		    <Style>
			    <ListStyle>
				    <listItemType>checkHideChildren</listItemType>
			    </ListStyle>
		    </Style>"""


    for u in range(len(wgs84)):
        for i in range(len(wgs84[u][0])-3):
            a += f"""<Placemark id=\"{u}v{i}\">
                <name>1</name><visibility>0</visibility>
                <styleUrl>#line-style{u}</styleUrl>
                <LineString>
                <tessellate>1</tessellate>
                <altitudeMode>relativeToGround</altitudeMode>
                <coordinates>
                    {wgs84[u][1][i]},{wgs84[u][0][i]},{wgs84[u][2][i]} {wgs84[u][1][i+1]},{wgs84[u][0][i+1]},{wgs84[u][2][i+1]}
                </coordinates>
                </LineString>
            </Placemark>"""

    a += f"""
        </Folder>
    </Document>
    </kml>
    """

    f = open(filepath, "w")
    f.write(a)
    f.close()


class SkybrushKMLExportOperator(Operator, ExportHelper):
    """Export object trajectories and light animation into Skybrush-compatible simple CSV format."""

    bl_idname = "export_scene.skybrush_kml"
    bl_label = "Export KML File"
    bl_options = {"REGISTER"}

    lattitude = FloatProperty(
        name="base-latitude",
        description="Lattitude of the base point",
        default= 52.4025517,
        soft_min= -90,
        soft_max= 90,
        precision= 7,
        # unit="LENGTH",
    )

    longitude = FloatProperty(
        name="base-longitude",
        description="Longitude of the base point",
        default= 16.9488291,
        soft_min= -180,
        soft_max= 180,
        precision= 7,
        # unit="LENGTH",
    )

    # List of file extensions that correspond to Skybrush CSV files (zipped)
    filter_glob = StringProperty(default="*.kml", options={"HIDDEN"})
    filename_ext = ".kml"

    # output all objects or only selected ones
    export_selected = BoolProperty(
        name="Export selected objects only",
        default=False,
        description=(
            "Export only the selected objects from the scene. Uncheck to export "
            "all objects, irrespectively of the selection."
        ),
    )

    # frame range
    frame_range = FrameRangeProperty(default="RENDER")

    # output frame rate
    output_fps = FloatProperty(
        name="Frame rate",
        default=4,
        description="Temporal resolution of exported trajectory and light (frames per second)",
    )

    def execute(self, context):
        filepath = bpy.path.ensure_ext(self.filepath, self.filename_ext)
        settings = {
            "export_selected": self.export_selected,
            "frame_range": self.frame_range,
            "output_fps": self.output_fps,
            "base_latitude" : self.lattitude,
            "base_longitude": self.longitude,
        }

        if os.path.basename(filepath).lower() == self.filename_ext.lower():
            self.report({"ERROR_INVALID_INPUT"}, "Filename must not be empty")
            return {"CANCELLED"}

        objects = list(get_drones_to_export(self.export_selected))
        if not objects:
            if self.export_selected:
                self.report({"WARNING"}, "No objects were selected; export cancelled")
            else:
                self.report(
                    {"WARNING"}, "There are no objects to export; export cancelled"
                )
            return {"CANCELLED"}

        _write_skybrush_file(context, settings, filepath)

        return {"FINISHED"}

    def invoke(self, context, event):
        if not self.filepath:
            filepath = bpy.data.filepath or "Untitled"
            filepath, _ = os.path.splitext(filepath)
            self.filepath = f"{filepath}.zip"

        context.window_manager.fileselect_add(self)
        return {"RUNNING_MODAL"}
